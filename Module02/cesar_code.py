"""
11. КОД ЦЕЗАРЯ
Досить часто програмісти стикаються із завданнями кодування інформації. Закодувати повідомлення в чаті між двома користувачами. 
Зашифрувати пароль та ім'я користувача при автентифікації користувача через мережу і т.і.
Напишіть програму, що реалізує код Цезаря. Він названий на честь великого римського імператора Юлія Цезаря.

Ідея шифрування полягає у циклічному зміщенні букв на задану кількість. Наприклад, якщо зміщення на три позиції, 
то літера A стає літерою D, B – E тощо. Останні три літери алфавіту зациклюються та переносяться на початок. 
Літера X стає A, Y – B, а Z – C. Цифри, пробіли та інші символи не шифруються.

У програмі користувач вводить фразу та число для зсуву, після чого треба вирахувати нове закодоване повідомлення.
Програма шифруватиме як малі (a-z), так і великі літери (A-Z).

Для розв'язку цього завдання знадобиться знання двох нових функцій. Перша функція ord. Вона перетворює символ на число, 
яке є позицією в таблиці ASCII.
ord("a")  # 97

Можна вважати, що отриманий результат '97' — це числове представлення символу a для комп'ютера.

Зворотна функція chr повертає рядковий символ у таблиці ASCII за позицією, переданою як аргумент.
chr(118)  # 'v'
Детальніший принцип шифрування.

Розглянемо для прикладу як зашифрувати символ v. Щоб отримати позицію символу v щодо початкового символу a, необхідно виконати вираз

pos = ord('v') - ord('a')  # 21
Але, згідно з алгоритмом, нам необхідно враховувати зсув, який може бути довільним, наприклад, 33. І пам'ятати, 
що алфавіт англійської мови заснований на латинському алфавіті та складається з 26 літер. 
Тому кінцева позиція символу v щодо символу a для шифрування з урахуванням цього — дорівнює 2.

pos = ord('v') - ord('a')  # 21
pos = (pos + 33) % 26  # 2

Залишився останній крок, отримати новий символ:

pos = ord('v') - ord('a')  # 21
pos = (pos + 33) % 26  # 2
new_char = chr(pos + ord("a"))  # 'c'
Символ v зі зміщенням 33 шифрується символом c.
"""

"""
for symbol in range(ord('a'), ord('z')+  1):
    pos = symbol - ord('a') # щоб дізнатися яким буде наш символ попорядку від літери а
    pos = (pos + 3) % 26  # 26 letters ib English alphabet
    new_char = chr(pos + ord('a'))
    #print(symbol)  Decimal numbers from ASCII table
    #print(chr(symbol)) alphabet
    #print(chr(symbol), end = ' ') # alphabet in row
    print(new_char, end = ' ') # alphabet in row
"""

#if 'a' <= character <= 'z':
    
#num = int(input('Enter number: ') 
#print(num % 26)


message = input("Enter a message: ")
offset = int(input("Enter the offset: "))
encoded_message = ""
for ch in message:
    if 'a' <= ch <= 'z':
        pos = ord(ch) - ord('a')
        pos = (pos + offset) % 26
        new_char = chr(pos + ord('a'))
        encoded_message += new_char
    elif 'A' <= ch <= 'Z':
        pos = ord(ch) - ord('A')
        pos = (pos + offset) % 26
        new_char = chr(pos + ord('A'))
        encoded_message += new_char

    else:
        encoded_message += ch # це озн що ми додаємо коми, пробіли та інші с-ли до нашого повідомлення дез будь якого перетворення

print(encoded_message)


#char = input('Enter char: ')
#print(char.isalpha()) # isalpha визначає чи введений символ є літерою